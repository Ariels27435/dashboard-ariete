// Script para probar los datos del ESP32 y verificar que se reflejen en el dashboard
import https from 'https';

const BACKEND_URL = 'https://backend-ariete.onrender.com';

// Funci√≥n para hacer peticiones HTTPS
function hacerPeticion(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          resolve(data);
        }
      });
    }).on('error', reject);
  });
}

// Funci√≥n para enviar datos del ESP32
async function enviarDatosESP32() {
  console.log('üöÄ Enviando datos simulados del ESP32...\n');

  try {
    // Datos de prueba
    const datosPrueba = [
      { endpoint: '/api/humedad', data: { humedad: 65 } },
      { endpoint: '/api/flujo', data: { flujo: 12.5 } },
      { endpoint: '/api/nivel', data: { nivel: 78 } }
    ];

    for (const test of datosPrueba) {
      console.log(`üì§ Enviando ${test.endpoint}:`, test.data);
      
      // Simular env√≠o (en realidad el ESP32 har√≠a esto)
      console.log(`‚úÖ ${test.endpoint} - Datos enviados`);
    }

    console.log('\n‚è≥ Esperando 3 segundos para que se procesen los datos...');
    await new Promise(resolve => setTimeout(resolve, 3000));

  } catch (error) {
    console.error('‚ùå Error enviando datos:', error.message);
  }
}

// Funci√≥n para verificar el estado del sistema
async function verificarEstado() {
  console.log('üîç Verificando estado del sistema...\n');

  try {
    // 1. Verificar health del backend
    console.log('1Ô∏è‚É£ Verificando backend...');
    const health = await hacerPeticion(`${BACKEND_URL}/api/health`);
    console.log('   ‚úÖ Backend:', health.status);
    console.log('   üìÖ Timestamp:', health.timestamp);

    // 2. Verificar endpoint de estado
    console.log('\n2Ô∏è‚É£ Verificando endpoint /api/estado...');
    const estado = await hacerPeticion(`${BACKEND_URL}/api/estado`);
    console.log('   üìä Datos actuales:');
    console.log(`      Humedad: ${estado.humedad}%`);
    console.log(`      Flujo: ${estado.flujo} L/min`);
    console.log(`      Nivel: ${estado.nivel}%`);
    console.log(`   üìÖ √öltima actualizaci√≥n: ${estado.timestamp}`);

    // 3. Verificar sensores ESP32
    console.log('\n3Ô∏è‚É£ Verificando sensores ESP32...');
    const sensores = await hacerPeticion(`${BACKEND_URL}/api/esp32/sensores?api_key=ariete-esp32-2025`);
    console.log(`   üìã Sensores encontrados: ${sensores.sensores?.length || 0}`);
    if (sensores.sensores) {
      sensores.sensores.forEach(sensor => {
        console.log(`      ${sensor.nombre}: ${sensor.ultimaLectura?.valor || 0} ${sensor.unidad}`);
      });
    }

    // 4. Verificar dashboard
    console.log('\n4Ô∏è‚É£ Verificando dashboard...');
    const dashboard = await hacerPeticion(`${BACKEND_URL}/api/reportes/dashboard`);
    console.log(`   üìä Sensores en dashboard: ${dashboard.sensores?.length || 0}`);
    if (dashboard.sensores) {
      dashboard.sensores.forEach(sensor => {
        console.log(`      ${sensor.sensor}: ${sensor.valor} ${sensor.unidad}`);
      });
    }

    console.log('\n================================================');
    console.log('‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('================================================\n');

    // Diagn√≥stico
    console.log('üîß DIAGN√ìSTICO:');
    if (estado.humedad === 0 && estado.flujo === 0 && estado.nivel === 0) {
      console.log('   ‚ö†Ô∏è  Los valores est√°n en 0 - El ESP32 no ha enviado datos recientes');
      console.log('   üí° Soluciones:');
      console.log('      1. Verificar que el ESP32 est√© conectado a WiFi');
      console.log('      2. Verificar que el ESP32 est√© enviando datos a:');
      console.log('         - POST https://backend-ariete.onrender.com/api/humedad');
      console.log('         - POST https://backend-ariete.onrender.com/api/flujo');
      console.log('         - POST https://backend-ariete.onrender.com/api/nivel');
      console.log('      3. Verificar la configuraci√≥n de red del ESP32');
    } else {
      console.log('   ‚úÖ Los datos se est√°n recibiendo correctamente');
    }

  } catch (error) {
    console.error('‚ùå Error verificando estado:', error.message);
    console.log('\nüîß POSIBLES SOLUCIONES:');
    console.log('   1. Verificar que el backend est√© funcionando en Render');
    console.log('   2. Verificar la conexi√≥n a MongoDB Atlas');
    console.log('   3. Revisar los logs del backend en Render');
  }
}

// Funci√≥n principal
async function main() {
  console.log('üîß DIAGN√ìSTICO DEL SISTEMA ARIETE HIDR√ÅULICO');
  console.log('================================================\n');

  await verificarEstado();
  
  console.log('\nüì± Para enviar datos desde el ESP32, usa estos endpoints:');
  console.log('   POST https://backend-ariete.onrender.com/api/humedad');
  console.log('   Body: { "humedad": 65 }');
  console.log('');
  console.log('   POST https://backend-ariete.onrender.com/api/flujo');
  console.log('   Body: { "flujo": 12.5 }');
  console.log('');
  console.log('   POST https://backend-ariete.onrender.com/api/nivel');
  console.log('   Body: { "nivel": 78 }');
}

// Ejecutar
main().catch(console.error);
